#ifndef RELATION_GENERATOR_H
#define RELATION_GENERATOR_H

#include <string>
#include <map>
#include <NTL/ZZ.h>
#include <NTL/RR.h>
#include "ANTL/IndexCalculus/Relation/Relation.hpp"
#include <ANTL/Interface/OrderInvariants.hpp>
#include "ANTL/Constants.hpp"
#include <ANTL/common.hpp>

using namespace ANTL;

namespace ANTL {
  class RelationGenerator {
  public:
    // constructors
    RelationGenerator(IOrder<NTL::ZZ, NTL::RR> const &order, std::map<std::string, std::string> const &params) :
    order(order) {
      long total_tests = 0;
      long total_rels_found = 0;

      /* params required keys: size_fb */
      if ( params.find(Constants::size_fb) == params.end() ) {
        std::cout << "RelationGenerator: size_fb should be set" << std::endl;
      } else {
        size_fb = std::stoi(params.find(Constants::size_fb)->second);
      }

      /* params optional keys: max_num_tests, seed */
      if ( params.find(Constants::max_num_tests) == params.end() ) {
        std::cout << "RelationGenerator: max_num_tests should be set" << std::endl;
      } else {
        max_num_tests = std::stoi(params.find(Constants::max_num_tests)->second);
      }
      if ( params.find(Constants::seed) == params.end() ) {
        std::cout << "RelationGenerator: seed should be set" << std::endl;
      } else {
        seed = std::stoi(params.find(Constants::seed)->second);
      }
    }

    /*
     * get_relation takes an empty relation as input
     * returns true if en empty relation was filled with a relation and false if no relation was found
     */
    virtual bool get_relation(Relation &rel, long &num_tests) {};

    RelationGenerator & operator = (const RelationGenerator &gen);

    long get_size_fb() {return size_fb;}
    long get_total_tests() {return total_tests;}
    long get_total_rels_found() {return total_rels_found;}
    long get_max_num_tests() {return max_num_tests;}

  protected:
    std::vector <Relation> rels;

    // total_tests should be implemented by the subclass
    // to measure the time spent trying to generate relations.
    // total_tests should increase each time get_relation() is called
    // Eg if relations are being generated by finding ideals of smooth norm then total tests could be implemented
    // as the number elements whose norms have been tested
    long total_tests = 0;

    // total number of relations that have been fully constructed
    long total_rels_found = 0;

    // Order that relations are generated for
    IOrder<NTL::ZZ, NTL::RR> const &order;

    // factor base associated with this relation generator
    FactorBase const *FB;

    /*** Required Constructor Parameters ***/
    // size of the factor base.
    // This is a required parameter in the params map that is passed to the constructor.
    long size_fb;

    // maximum number of tests that can be performed
    // This is a required parameter in the params map that is passed to the constructor
    long max_num_tests;

    /*** Optional constructor parameters ***/
    // random seed that is used by get_relation.
    // This is an optional parameter in the params map that is passed to the constructor.
    // Relation generators that generate random relations should implement seed so that it can be set using the
    // parameters list in the initializer.
    long seed;
  };
}

#endif

